/*
 * Copyright (c) 2020 Shadew
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.shadew.util.misc;

import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

import net.shadew.util.contract.NotNull;
import net.shadew.util.contract.Nullable;
import net.shadew.util.contract.Validate;

/**
 * Utilities for dealing with values that might often be null.
 */
public final class OptionalUtil {
    private OptionalUtil() {
    }

    /**
     * Gets a value optionally from a map, via {@link Map#get}. This returns an {@link Optional} with the value if a
     * value was mapped under the given key and only if the value was not null. This returns an empty {@link Optional}
     * when the key wasn't in the map or mapped to null.
     *
     * @param map The map to lookup in
     * @param key The key to get
     * @return An optional with the value in the map, or an empty optional if that value didn't exist or was null.
     *
     * @throws NullPointerException When the given map was null
     */
    @NotNull
    public static <K, V> Optional<V> mapGet(@NotNull Map<K, V> map, K key) {
        Validate.notNull(map, "map");
        return Optional.ofNullable(map.get(key));
    }

    /**
     * Returns an enum constant by name in an {@link Optional}, or returns an empty {@link Optional} if that name wasn't
     * defined in the enum. This works like {@link Enum#valueOf}, but does not fail if the provided name was not a valid
     * enum constant. By definition an empty optional is returned if the given name is null
     *
     * @param cls  The enum type
     * @param name The enum constant name
     * @return The enum constant, optionally, empty if the name did not map to an enum constant.
     *
     * @throws NullPointerException When the enum {@link Class} is null
     */
    @NotNull
    public static <E extends Enum<E>> Optional<E> enumByName(Class<E> cls, String name) {
        Validate.notNull(cls, "cls");
        if (name == null) return Optional.empty();
        E[] consts = cls.getEnumConstants();
        for (E e : consts) {
            if (e.name().equals(name)) {
                return Optional.of(e);
            }
        }
        return Optional.empty();
    }

    /**
     * Returns an {@link Optional} containing the given object when the given condition is true and the given object not
     * null. Returns an empty {@link Optional} otherwise.
     *
     * @param obj       The object to be in the optional
     * @param condition The condition to be true for a nonempty optional
     * @return An optional with the specified object if all conditions apply. Empty optional otherwise.
     */
    @NotNull
    public static <T> Optional<T> onlyIf(T obj, boolean condition) {
        if (condition) return Optional.ofNullable(obj);
        return Optional.empty();
    }

    /**
     * Gets the value of the given {@link Optional}, or null if not present.
     *
     * @param opt The optional to get the value of
     * @return The value in the optional or null
     *
     * @throws NullPointerException When the optional is null
     */
    @Nullable
    public static <T> T orNull(@NotNull Optional<T> opt) {
        Validate.notNull(opt, "opt");
        return opt.orElse(null);
    }

    /**
     * Returns the first object if it's not null, returns the second (default) object otherwise. When both arguments are
     * null, this method returns null.
     *
     * @param t   Object to be returned if not null
     * @param def Object to be returned if {@code t} is null
     * @return First argument if not null, second argument otherwise
     */
    public static <T> T orElse(T t, T def) {
        return t == null ? def : t;
    }

    /**
     * Returns the first object if it's not null, returns the value generated by the default supplier otherwise. When
     * the first object is null and the default supplier generated null too, this method returns null.
     *
     * @param t   Object to be returned if not null
     * @param def Supplier to generate a value if {@code t} is null
     * @return First argument if not null, generated default otherwise
     *
     * @throws NullPointerException When the given supplier is null
     */
    public static <T> T orElseGet(T t, Supplier<T> def) {
        Validate.notNull(def, "def");
        return t == null ? def.get() : t;
    }

    /**
     * Returns the given object if it's not null, throws an exception otherwise.
     *
     * @param t   Object to be returned if not null
     * @param err Supplier to generate a value if {@code t} is null
     * @param <E> Exception type
     * @return First argument if not null, generated default otherwise
     *
     * @throws E                    When the given supplier is null
     * @throws NullPointerException When the given supplier is null, or when the error supplier generated a null value
     *                              after determining the given object was null
     */
    public static <T, E extends Throwable> T orElseThrow(T t, Supplier<E> err) throws E {
        Validate.notNull(err, "err");
        if (t == null)
            throw err.get();
        return t;
    }

    /**
     * Applies the provided operation to the given object if it's not null. Return the mapped object or null if the
     * given object is null.
     *
     * @param t    Object to map
     * @param func Function that applies the operation
     * @param <T>  From type
     * @param <U>  To type
     * @return Null if the given object is null, or the mapped object if it wasn't
     *
     * @throws NullPointerException When the given function is null
     */
    public static <T, U> U map(T t, Function<? super T, ? extends U> func) {
        Validate.notNull(func, "func");
        return t == null ? null : func.apply(t);
    }

    /**
     * Returns the given object when it's not null and conforms to the given {@link Predicate}, or null otherwise.
     *
     * @param t    The object to be filtered, if present
     * @param func The filter function
     * @return The given object if not null and conform the given predicate, or null.
     *
     * @throws NullPointerException When the given predicate is null
     */
    public static <T> T filter(T t, Predicate<? super T> func) {
        Validate.notNull(func, "func");
        return t == null ? null : func.test(t) ? t : null;
    }

    /**
     * Returns whether the given object is not null and conforms to the given {@link Predicate}.
     *
     * @param t    The object to be tested
     * @param func The test function
     * @return True if the object is not null and conforms to the given predicate
     *
     * @throws NullPointerException When the given predicate is null
     */
    public static <T> boolean testOrFalse(T t, Predicate<? super T> func) {
        Validate.notNull(func, "func");
        return t != null && func.test(t);
    }

    /**
     * Returns whether the given object is null or conforms to the given {@link Predicate}.
     *
     * @param t    The object to be tested
     * @param func The test function
     * @return True if the object is null or conforms to the given predicate
     *
     * @throws NullPointerException When the given predicate is null
     */
    public static <T> boolean testOrTrue(T t, Predicate<? super T> func) {
        Validate.notNull(func, "func");
        return t == null || func.test(t);
    }

    /**
     * Feeds the given object to the given {@link Consumer}, but only when it's not null.
     *
     * @param t    The object to feed
     * @param func The function that consumes the object
     * @throws NullPointerException When the given consumer is null
     */
    public static <T> void ifPresent(T t, Consumer<? super T> func) {
        Validate.notNull(func, "func");
        if (t != null)
            func.accept(t);
    }

    /**
     * Throws a {@link NullPointerException} when the given argument is null. Returns the given argument otherwise.
     *
     * @param t Object to be not null
     * @return The object, not null
     *
     * @throws NullPointerException When the given object is null
     */
    @NotNull
    public static <T> T notNull(@Nullable T t) {
        if (t == null) throw new NullPointerException("Null value!");
        return t;
    }
}
